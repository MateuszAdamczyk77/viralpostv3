-- =============================================
-- Migration: Initial Schema Setup
-- Purpose: Create core tables for AI Slideshow Generator
-- Tables: collections, images, slideshows, slides, user_integrations, files
-- Created: 2025-01-06 12:00:00 UTC
-- =============================================

-- Enable necessary extensions
create extension if not exists "uuid-ossp";

-- =============================================
-- Table: collections
-- Purpose: Store user image collections
-- =============================================
create table public.collections (
  id uuid default gen_random_uuid() primary key,
  owner_id uuid references auth.users(id) on delete cascade not null,
  name text not null,
  description text,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

comment on table public.collections is 'User-created image collections that can be used to generate slideshows';
comment on column public.collections.owner_id is 'Reference to the user who owns this collection';
comment on column public.collections.name is 'User-defined name for the collection';
comment on column public.collections.description is 'Optional description of the collection';

-- Enable RLS on collections table
alter table public.collections enable row level security;

-- =============================================
-- Table: images
-- Purpose: Store metadata for uploaded and AI-generated images
-- =============================================
create table public.images (
  id uuid default gen_random_uuid() primary key,
  owner_id uuid references auth.users(id) on delete cascade not null,
  collection_id uuid references public.collections(id) on delete cascade not null,
  storage_key text not null unique,
  original_filename text,
  mime_type text not null,
  file_size bigint not null,
  width integer,
  height integer,
  image_type text not null check (image_type in ('uploaded', 'ai')),
  ai_prompt text,
  created_at timestamptz default now() not null
);

comment on table public.images is 'Metadata for all images (uploaded and AI-generated) stored in collections';
comment on column public.images.owner_id is 'Reference to the user who owns this image';
comment on column public.images.collection_id is 'Reference to the collection this image belongs to';
comment on column public.images.storage_key is 'Unique key for the image in Supabase Storage';
comment on column public.images.original_filename is 'Original filename for uploaded images';
comment on column public.images.image_type is 'Type of image: uploaded by user or generated by AI';
comment on column public.images.ai_prompt is 'Prompt used to generate AI images (null for uploaded images)';

-- Enable RLS on images table
alter table public.images enable row level security;

-- =============================================
-- Table: slideshows
-- Purpose: Store slideshow metadata and configuration
-- =============================================
create table public.slideshows (
  id uuid default gen_random_uuid() primary key,
  owner_id uuid references auth.users(id) on delete cascade not null,
  collection_id uuid references public.collections(id) on delete cascade not null,
  title text not null,
  subtitle_prompt text,
  style_template text default 'default' not null,
  status text default 'draft' not null check (status in ('draft', 'generating', 'ready', 'error')),
  video_url text,
  video_duration integer,
  render_job_id text,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

comment on table public.slideshows is 'Slideshow configurations created from image collections';
comment on column public.slideshows.owner_id is 'Reference to the user who owns this slideshow';
comment on column public.slideshows.collection_id is 'Reference to the source collection';
comment on column public.slideshows.subtitle_prompt is 'Prompt used to generate subtitles for slides';
comment on column public.slideshows.style_template is 'Template style applied to the slideshow';
comment on column public.slideshows.status is 'Current status of slideshow processing';
comment on column public.slideshows.video_url is 'URL to the final rendered video (from Creatomate)';
comment on column public.slideshows.render_job_id is 'External job ID for video rendering tracking';

-- Enable RLS on slideshows table
alter table public.slideshows enable row level security;

-- =============================================
-- Table: slides
-- Purpose: Store individual slide data within slideshows
-- =============================================
create table public.slides (
  id uuid default gen_random_uuid() primary key,
  slideshow_id uuid references public.slideshows(id) on delete cascade not null,
  image_id uuid references public.images(id) on delete cascade not null,
  subtitle text not null,
  duration_seconds integer default 4 not null check (duration_seconds > 0 and duration_seconds <= 30),
  slide_order integer not null,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

comment on table public.slides is 'Individual slides within a slideshow with their subtitles and timing';
comment on column public.slides.slideshow_id is 'Reference to the parent slideshow';
comment on column public.slides.image_id is 'Reference to the image used in this slide';
comment on column public.slides.subtitle is 'Text subtitle displayed over the image';
comment on column public.slides.duration_seconds is 'How long this slide is displayed (1-30 seconds)';
comment on column public.slides.slide_order is 'Order position of this slide in the slideshow';

-- Enable RLS on slides table
alter table public.slides enable row level security;

-- =============================================
-- Table: user_integrations
-- Purpose: Store third-party service integration tokens (TikTok OAuth)
-- =============================================
create table public.user_integrations (
  id uuid default gen_random_uuid() primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  service_name text not null check (service_name in ('tiktok')),
  encrypted_access_token text not null,
  encrypted_refresh_token text,
  token_expires_at timestamptz,
  scope text,
  is_active boolean default true not null,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  unique(user_id, service_name)
);

comment on table public.user_integrations is 'Third-party service integrations for users (OAuth tokens)';
comment on column public.user_integrations.user_id is 'Reference to the user who owns this integration';
comment on column public.user_integrations.service_name is 'Name of the integrated service (e.g., tiktok)';
comment on column public.user_integrations.encrypted_access_token is 'AES-256-GCM encrypted access token';
comment on column public.user_integrations.encrypted_refresh_token is 'AES-256-GCM encrypted refresh token';
comment on column public.user_integrations.is_active is 'Whether this integration is currently active and valid';

-- Enable RLS on user_integrations table
alter table public.user_integrations enable row level security;

-- =============================================
-- Table: files
-- Purpose: Track file uploads and virus scanning status
-- =============================================
create table public.files (
  id uuid default gen_random_uuid() primary key,
  owner_id uuid references auth.users(id) on delete cascade not null,
  bucket text not null,
  storage_key text not null unique,
  original_filename text,
  mime_type text not null,
  file_size bigint not null,
  width integer,
  height integer,
  is_infected boolean default false not null,
  scan_status text default 'pending' not null check (scan_status in ('pending', 'clean', 'infected', 'error')),
  created_at timestamptz default now() not null
);

comment on table public.files is 'File upload tracking with virus scan results for security';
comment on column public.files.owner_id is 'Reference to the user who uploaded this file';
comment on column public.files.bucket is 'Supabase Storage bucket name (public, private, transient)';
comment on column public.files.storage_key is 'Unique key for the file in Supabase Storage';
comment on column public.files.is_infected is 'Whether virus scan detected malware';
comment on column public.files.scan_status is 'Current status of virus scanning process';

-- Enable RLS on files table
alter table public.files enable row level security;

-- =============================================
-- Create indexes for performance optimization
-- =============================================

-- Multi-tenant indexes for RLS performance
create index idx_collections_owner_id on public.collections(owner_id);
create index idx_collections_owner_created on public.collections(owner_id, created_at desc);

create index idx_images_owner_id on public.images(owner_id);
create index idx_images_collection_id on public.images(collection_id);
create index idx_images_owner_collection on public.images(owner_id, collection_id);
create index idx_images_storage_key on public.images(storage_key);

create index idx_slideshows_owner_id on public.slideshows(owner_id);
create index idx_slideshows_collection_id on public.slideshows(collection_id);
create index idx_slideshows_owner_created on public.slideshows(owner_id, created_at desc);
create index idx_slideshows_status on public.slideshows(status);

create index idx_slides_slideshow_id on public.slides(slideshow_id);
create index idx_slides_slideshow_order on public.slides(slideshow_id, slide_order);
create index idx_slides_image_id on public.slides(image_id);

create index idx_user_integrations_user_id on public.user_integrations(user_id);
create index idx_user_integrations_service on public.user_integrations(user_id, service_name);
create index idx_user_integrations_active on public.user_integrations(user_id, is_active) where is_active = true;

create index idx_files_owner_id on public.files(owner_id);
create index idx_files_storage_key on public.files(storage_key);
create index idx_files_scan_status on public.files(scan_status) where scan_status = 'pending';

-- =============================================
-- Create updated_at trigger function
-- =============================================
create or replace function public.handle_updated_at()
returns trigger
language plpgsql
security definer
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

comment on function public.handle_updated_at() is 'Trigger function to automatically update updated_at timestamps';

-- Apply updated_at triggers to relevant tables
create trigger collections_updated_at
  before update on public.collections
  for each row execute function public.handle_updated_at();

create trigger slideshows_updated_at
  before update on public.slideshows
  for each row execute function public.handle_updated_at();

create trigger slides_updated_at
  before update on public.slides
  for each row execute function public.handle_updated_at();

create trigger user_integrations_updated_at
  before update on public.user_integrations
  for each row execute function public.handle_updated_at(); 